<?php
// TODO > NEW, pager, gérer la mise à jour d'un commentaire
// Indent qui déconne si suppression d'un parent (supprimer les indent vides)
// Suppression > Créer un "bon" selecteur pour supprimer les bons éléments du dom liés au bon commentaire
// Page d'administration pour les urls (DEFINE)
// Gestion des "odd" / "even"

define('NODEJS_URL', 'http://nodejs.dev.c--g.net:3000/');


function nodejs_init() {
  if (arg(0) == "node" && is_numeric(arg(1))) {
    $page = 0;
    if (isset($_GET['page'])) {
      $page = $_GET['page'];
    }
    drupal_add_js(array(
      'nodejs' => array(
        'nid' => arg(1),
        'page' => $page,
      ),
    ), "setting");
    drupal_add_js(drupal_get_path('module', 'nodejs') . '/faye-client-min.js');
    drupal_add_js(drupal_get_path('module', 'nodejs') . '/nodejs.js');
  }
}

/**
 *  Implements hook_menu().
 *  Arg(1) is the node
 *  Arg(2) is the comment id
 */
function nodejs_menu() {
  return array(
    'node/%node/comment/%/js' => array(
      'page callback' => 'nodejs_raw_comment',
      'page arguments' => array(1, 3),
      'access callback' => TRUE,
    ),
    'node/%node/comment/json' => array(
      'page callback' => 'nodejs_tree_page',
      'page arguments' => array(1),
      'access callback' => TRUE,
    ),
  );
}

function nodejs_tree_page($node) {
  drupal_json(array("data" => nodejs_get_tree($node)));
}

/**
 *  Get a raw comment for NodeJS
 *
 *  @param $comment
 *  Fully comment object
 *  @return
 *  Return a JSON object with raw comment
 */
function nodejs_raw_comment($node, $cid = FALSE) {
  $comment_output = '';
   
   // Single comment view.
    $query = 'SELECT c.cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d';
    $query_args = array($cid);
    if (!user_access('administer comments')) {
      $query .= ' AND c.status = %d';
      $query_args[] = COMMENT_PUBLISHED;
    }

    $query = db_rewrite_sql($query, 'c', 'cid');
    $result = db_query($query, $query_args);

    if ($comment = db_fetch_object($result)) {
      $comment->name = $comment->uid ? $comment->registered_name : $comment->name;
      $links = module_invoke_all('link', 'comment', $comment, 1);
      drupal_alter('link', $links, $node);

      $comment_output .= theme('comment_view', $comment, $node, $links);
    }
   
   
   drupal_json(array("data" => $comment_output));
}

/**
 * Renders comment(s) tree.
 */
function nodejs_get_tree($node) {
  global $user;

  if (!user_access('access comments')) {
    return array();
  }

  $mode = _comment_get_display_setting('mode', $node);
  $order = _comment_get_display_setting('sort', $node);
  $comments_per_page = _comment_get_display_setting('comments_per_page', $node);

  // Multiple comment view
  $query_count = 'SELECT COUNT(*) FROM {comments} c WHERE c.nid = %d';
  $query = 'SELECT c.cid as cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data, c.thread, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.nid = %d';
  $query_args = array($node->nid);
  $query .= ' AND c.status = %d';
  $query_count .= ' AND c.status = %d';
  $query_args[] = COMMENT_PUBLISHED;

  if ($order == COMMENT_ORDER_NEWEST_FIRST) {
    if ($mode == COMMENT_MODE_FLAT_COLLAPSED || $mode == COMMENT_MODE_FLAT_EXPANDED) {
      $query .= ' ORDER BY c.cid DESC';
    }
    else {
      $query .= ' ORDER BY c.thread DESC';
    }
  }
  else if ($order == COMMENT_ORDER_OLDEST_FIRST) {
    if ($mode == COMMENT_MODE_FLAT_COLLAPSED || $mode == COMMENT_MODE_FLAT_EXPANDED) {
      $query .= ' ORDER BY c.cid';
    }
    else {
      // See comment above. Analysis reveals that this doesn't cost too
      // much. It scales much much better than having the whole comment
      // structure.
      $query .= ' ORDER BY SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1))';
    }
  }
  $query = db_rewrite_sql($query, 'c', 'cid');
  $query_count = db_rewrite_sql($query_count, 'c', 'cid');

  // Start a form, for use with comment control.
  $result = db_query($query, $query_args);
  $count = 0;
  $comments = array();
  while ($comment = db_fetch_object($result)) {
    $comment = drupal_unpack($comment);
    $comment->name = $comment->uid ? $comment->registered_name : $comment->name;
    $comment->depth = count(explode('.', $comment->thread)) - 1;
    $page_offset = floor($count / $comments_per_page);
    $comments[$page_offset][] = array(
      'cid' => $comment->cid,
      'depth' => $comment->depth,
    );
    $count++;
  }
  return $comments;
}

/**
 * Implements hook_comment().
 */
function nodejs_comment($comment, $op) {
  if ($op == "insert" || $op == "delete") {
    // Get the comments tree and send it to nodejs
    if (is_object($comment)) {
      $node = node_load($comment->nid);
    }
    else {
      $node = node_load($comment["nid"]);
    }
    $comments_tree = nodejs_get_tree($node);
    drupal_http_request(NODEJS_URL . 'publish/' . $node->nid, array(), 'POST', drupal_to_js($comments_tree));
  }
}